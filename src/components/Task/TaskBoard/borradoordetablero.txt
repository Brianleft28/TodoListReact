import React, { useContext } from 'react';
import { useDndContext } from '@dnd-kit/core';
import { arrayMove } from '@dnd-kit/sortable';
import TaskContext from '../../../context/TaskContext';
import TaskEditModal from '../TaskEditModal/TaskEditModal';
import { saveTasks } from '../../../logic/localStorageService.js';

const TaskBoard = () => {
  // Usando el contexto
  const { isOpen, tasks, setTasks, setIsOpen, setCurrentTask } = useContext(TaskContext);

  // Manejador del evento arrastrar
  const handleDragEnd = (event) => {
    const { active, over } = event;

    if (over) {
      const oldIndex = tasks.findIndex((task) => task.id === active.id);
      const newIndex = tasks.findIndex((task) => task.id === over.id);

      const newOrder = arrayMove(tasks, oldIndex, newIndex);
      setTasks(newOrder);
      saveTasks(newOrder);
    }
  };

  // Sensores para activar el drop
  // En este caso se activa el drop luego de 150ms de estar sobre un elemento
  // y con una tolerancia de 1px
  const sensors = useDndContext({
    activationConstraint: {
      delay: 150,
      tolerance: 1,
    },
  });

  return (




  /*  <table className="bg-transparent max-h-[calc(100vh-60px)] table table-xs mx-auto justify-around-row">
            {/* head }
            <thead>
              <tr className="pb-2 p-2 border-b-1 border-neutral">
                <th>Titulo</th>
                <th>Descripci√≥n</th>
                <th>Estado</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              <br />
              {/* Contexto para el DND }
              <DndContext
                collisionDetection={closestCenter}
                onDragEnd={handleDragEnd}
                sensors={sensors}
              >
                <SortableContext
                  items={tasks}
                  strategy={verticalListSortingStrategy}
                >
                  {/* Renderizado de las tareas con TASKCARD }
                  {tasks.map((task) => (
                    <React.Fragment key={task.id}>
                      <TaskCard
                        taskId={task.id}
                        title={task.title}
                        description={task.description}
                        status={task.status}
                        onEditClick={() => handleEditClick(task)}
                      />
                      <hr className="hidden" />
                    </React.Fragment>
                  ))}
                </SortableContext>
              </DndContext>
            </tbody>
          </table> */
  );
};

export default TaskBoard;




}
